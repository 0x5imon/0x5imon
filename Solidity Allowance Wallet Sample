// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";


contract AllowanceContract is Ownable{

    using SafeMath for uint; 
    event AllowanceChanged(address indexed _forWho, address indexed _fromWhom, uint _oldAmount, uint _newAmount);

    mapping(address => uint) public allowance;

   
    function addAllowance (address _who, uint _amount) public onlyOwner{
        emit AllowanceChanged(_who, msg.sender, allowance[_who], allowance[_who] + _amount);
        allowance[_who] = allowance[_who].add(_amount);
    }


    modifier ownerOrAllowed(uint _amount) {
        require(owner() == _msgSender() || allowance[msg.sender] >= _amount, "you are not authorized");
        _;
    }


    function withdrawFunds(address payable _to, uint _amount) public ownerOrAllowed(_amount) {
        require(_amount <= allowance[_to], "there is not enough allowance");
        reduceAllowance(_to, _amount);
        _to.transfer(_amount);
    }

    function reduceAllowance(address _who, uint _amount) internal ownerOrAllowed(_amount){
        emit AllowanceChanged(_who, msg.sender, allowance[_who], allowance[_who] - _amount);
        allowance[_who] = allowance[_who].sub(_amount);
    }

}



contract WalletExample is AllowanceContract{
    function receivefunds() public payable {
    }

    function showbalance() public view returns(uint){
        return address(this).balance;
    }

    function renounceOwnership() override pure public{
        revert("cannot renounce ownership here");
    }

}
